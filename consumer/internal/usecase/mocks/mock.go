// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go
//
// Generated by this command:
//
//	mockgen -source=usecase.go -destination=mocks/mock.go
//
// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	entity "go-nats-pub-sub-restapi-postgresql/consumer/internal/entity"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockUser is a mock of User interface.
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
}

// MockUserMockRecorder is the mock recorder for MockUser.
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance.
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// AccrualBalanceUser mocks base method.
func (m *MockUser) AccrualBalanceUser(ctx context.Context, userDTO *entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccrualBalanceUser", ctx, userDTO)
	ret0, _ := ret[0].(error)
	return ret0
}

// AccrualBalanceUser indicates an expected call of AccrualBalanceUser.
func (mr *MockUserMockRecorder) AccrualBalanceUser(ctx, userDTO any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccrualBalanceUser", reflect.TypeOf((*MockUser)(nil).AccrualBalanceUser), ctx, userDTO)
}

// CreateUser mocks base method.
func (m *MockUser) CreateUser(ctx context.Context, userDTO *entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, userDTO)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserMockRecorder) CreateUser(ctx, userDTO any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUser)(nil).CreateUser), ctx, userDTO)
}

// GetBalance mocks base method.
func (m *MockUser) GetBalance(ctx context.Context, id string) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", ctx, id)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockUserMockRecorder) GetBalance(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockUser)(nil).GetBalance), ctx, id)
}
